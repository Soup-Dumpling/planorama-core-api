// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planorama.User.Infrastructure;

#nullable disable

namespace Planorama.User.Infrastructure.Migrations
{
    [DbContext(typeof(UserDBContext))]
    [Migration("20250722104027_AddedUserPrivacySettingsTable")]
    partial class AddedUserPrivacySettingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Planorama.User.Core.Models.IntegrationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEvents");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb1b340c-4437-492e-8703-01815179e510"),
                            IdentityName = "planorama.user",
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("17f6719f-4af1-4d2e-a7db-0a6e0750c149"),
                            IdentityName = "planorama.member",
                            Name = "Member"
                        },
                        new
                        {
                            Id = new Guid("3054c7dd-b9b0-406d-86bc-345155f6b51f"),
                            IdentityName = "planorama.moderator",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("5f0e7491-7a95-418a-9545-5adc7a079037"),
                            IdentityName = "planorama.admin",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Planorama.User.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserCredential", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("UserId", "EmailAddress")
                        .IsUnique()
                        .HasFilter("[EmailAddress] IS NOT NULL");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserPrivacySetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId");

                    b.HasIndex("UserId", "IsPrivate")
                        .IsUnique();

                    b.ToTable("UserPrivacySettings");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserCredential", b =>
                {
                    b.HasOne("Planorama.User.Core.Models.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("Planorama.User.Core.Models.UserCredential", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserPrivacySetting", b =>
                {
                    b.HasOne("Planorama.User.Core.Models.User", "User")
                        .WithOne("UserPrivacySetting")
                        .HasForeignKey("Planorama.User.Core.Models.UserPrivacySetting", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.UserRole", b =>
                {
                    b.HasOne("Planorama.User.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planorama.User.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Planorama.User.Core.Models.User", b =>
                {
                    b.Navigation("UserCredential");

                    b.Navigation("UserPrivacySetting");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
